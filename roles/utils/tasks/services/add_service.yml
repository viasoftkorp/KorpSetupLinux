# deve ser chamado dentro da role do ID
#   - name: Adição de serviços de <appId ou domínio>
#     ansible.builtin.include_role:
#       name: utils
#       tasks_from: services/add_service
#     vars:
#       service_name: "{{ item.key }}"
#       id: <appId ou domínio>
#     with_dict: "{{ (lookup('file', 'vars/main.yml') | from_yaml)['services'] }}"
#     loop_control:
#       extended: true

# vars:
#   skip_compose - (bool) OPCIONAL
#   service_name - (string) OBRIGATÓRIO
#   id: - (string) OBRIGATÓRIO

- name: "Validação de variáveis de {{ service_name }}"
  ansible.builtin.include_role:
    name: utils
    tasks_from: services/vars_validation

- name: Criação de secret
  ansible.builtin.set_fact:
    secret: "{{ 10000 | random | to_uuid | upper }}"

- name: "Garantia de kv no consul para {{ service_name }}"
  ansible.builtin.include_role:
    name: utils
    tasks_from: 'consul_kv/ensure_kv'

- name: "Adição de cliente oauth2 para {{ service_name }}"
  ansible.builtin.include_role:
    name: utils
    tasks_from: oauth_client/ensure_client
  when: not service_vars.oauth_client.skip

- name: "Criação de bancos de dados para {{ service_name }}"
  ansible.builtin.include_role:
    name: utils
    tasks_from: "create_db/{{ service_vars.db.type }}"
  vars:
    db_name: "{{ service_vars.db.name }}"
  when: service_vars.db is defined

- name: "Garantia da existência dos diretórios de volume de {{ service_name }}"
  ansible.builtin.include_role:
    name: utils
    tasks_from: services/ensure_volume_folder
  vars:
    volume_path: "{{ volume_dir }}"
  loop: "{{ service_vars.volumes_directories }}"
  loop_control:
    loop_var: volume_dir
  when: service_vars.volumes_directories is defined

# essa task só acontece na ultima iteração do loop
# isso é necessário pois a configuração de composes só deve acontecer uma vez, quando todos os serviços já estão configurados
- name: Setup de app
  block:
    - name: Checagem de compose - versionado
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/roles/{{ id }}/templates/composes/{{ version_without_build }}/{{ id }}-compose.yml.j2"
      register: versioned_compose_result
      # por algum motivo, o ansible dá erro executando essa task como super user
      become: false

    - name: Checagem de compose - não versionado
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/roles/{{ id }}/templates/composes/{{ id }}-compose.yml.j2"
      register: unversioned_compose_result
      # por algum motivo, o ansible dá erro executando essa task como super user
      become: false

    - name: Definição de serviços exclusivos
      vars:
        compose_content: "{{  lookup('ansible.builtin.template', unversioned_compose_result.stat.path) | from_yaml }}"
      ansible.builtin.set_fact:
        exclusive_services_list: "{{ [item.value.container_name ] + (exclusive_services_list | default([]) ) }}"
      with_dict: "{{ compose_content.services }}"
      when: (unversioned_compose_result.stat.exists) and ((((item.value.image | split(':'))[1]) | split('.')) | length > 3)

    - name: Definição de serviços não versionados
      vars:
        services: "{{ (lookup('ansible.builtin.template', '~/roles/{{ id }}/vars/main.yml') | from_yaml)['services'] }}"
      ansible.builtin.set_fact:
        unversioned_services_list: "{{ [item.key] + (unversioned_services_list | default([]) ) }}"
      with_dict: "{{ services }}"
      when: item.value.version.unversioned is defined and item.value.version.unversioned

    - name: Definição de versões
      ansible.builtin.set_fact:
        has_versioned_services: "{{ versioned_compose_result.stat.exists }}"
        has_unversioned_services: "{{ unversioned_services_list | length > 0 }}"
        has_exclusive_services: "{{ exclusive_services_list | length > 0 }}"

    - name: "Setup de docker compose de {{ id }}"
      ansible.builtin.include_role:
        name: utils
        tasks_from: apps/compose_setup.yml
      when:
        - not (skip_compose is defined and skip_compose)

    - name: "Garantia de registro de {{ id }}"
      ansible.builtin.include_role:
        name: utils
        tasks_from: apps/ensure_mapping.yml
      when:
        - not (skip_app_register is defined and skip_app_register)

  when:
    - ansible_loop.last
