version: "3.8"

x-extra_hosts:
  &default-extra_hosts
  - "db_mssql:$DB_MSSQL"
  - "testing_db_mssql:$TESTING_DB_MSSQL" 
  - "app_server:$APP_SERVER"
  - "{{ frontend.dns.api }}:$API_GATEWAY"
  - "{{ frontend.dns.frontend }}:$PORTAL_GATEWAY"
  - "{{ frontend.dns.cdn }}:$CDN_GATEWAY"

networks:
  servicos:
    external:
      name: servicos

services:
  consul-server:
    image: "consul:1.12"
    container_name: "consul-server"
    restart: always
    command: "agent -server -bootstrap-expect=1"
    ports:
      - "8300:8300"
      - "8301:8301/tcp"
      - "8301:8301/udp"
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    volumes:
      - "{{ config_dir_path }}/consul-server.json:/consul/config/server.json"
      - "{{ dados_docker_dir_path }}/consul-server/:/consul/data/"
    networks:
      - servicos
    labels:
      com.centurylinklabs.watchtower.enable: false

  nginx:
    image: "nginx:latest"
    container_name: "nginx"
    restart: always
    extra_hosts: *default-extra_hosts
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - {{ config_dir_path }}/nginx/ssl_conf:/etc/nginx/ssl_conf
      - {{ config_dir_path }}/nginx/conf.d/:/etc/nginx/conf.d/
      - {{ self_signed_certs_directory }}/:/etc/nginx/certs/
    networks:
      - servicos
    labels:
      com.centurylinklabs.watchtower.enable: false

  fabio:
    image: "fabiolb/fabio:latest"
    container_name: "fabio"
    restart: always
    depends_on:
      - consul-server
    extra_hosts: *default-extra_hosts
    environment:
      - registry_consul_addr=http://consul-server:8500
      - proxy_matcher=iprefix
    ports:
      - "9999:9999"
      - "9998:9998"
    networks:
      servicos:
        ipv4_address: "{{ docker_servicos_network_ip_address_start | default ('172.18') }}.128.0"
    labels:
      com.centurylinklabs.watchtower.enable: false

  {{ postgres_container_name }}:
    image: "postgres:14"
    command: ["postgres", "-c", "config_file=/etc/postgresql.conf"]
    container_name: "{{ postgres_container_name }}"
    restart: always
    environment:
      - POSTGRES_PASSWORD={{ postgres.default_password }}
    ports:
      - "5432:5432"
    volumes:
      - "{{ dados_docker_dir_path }}/{{ postgres_container_name }}/:/var/lib/postgresql/data"
      - "{{ config_dir_path }}/postgres/postgresql.conf:/etc/postgresql.conf"
    networks:
      - servicos
    labels:
      com.centurylinklabs.watchtower.enable: false

  {{ rabbitmq_container_name }}:
    image: "korp/rabbitmq:1.1.0"
    container_name: "{{ rabbitmq_container_name }}"
    # não remover esse hostname porque o RABBITMQ utiliza o hostname da máquina para compor as pastas internas
    # e cada vez que um container inicia, seu nome é alterado caso não esteja especificado
    hostname: "rabbitmq" 
    restart: always
    depends_on:
      - consul-server
    environment:
      - TCP_PORTS=15672,5672
      - RABBITMQ_NODENAME=rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - "{{ dados_docker_dir_path }}/{{ rabbitmq_container_name }}/:/var/lib/rabbitmq"
    networks:
      - servicos

  {{ redis_container_name }}:
    image: "redis:7.0"
    container_name: "{{ redis_container_name }}"
    hostname: "redis"
    restart: always
    depends_on:
      - consul-server
    command: "redis-server /usr/local/etc/redis/redis.conf"
    sysctls:
      net.core.somaxconn: 1024
    networks:
      - servicos
    ports:
      - "6379:6379"
    volumes:
      - "{{ config_dir_path }}/redis.conf:/usr/local/etc/redis/redis.conf"
    labels:
      com.centurylinklabs.watchtower.enable: false

  portainer:
    image: "portainer/portainer-ce:2.9.1"
    container_name: "portainer"
    restart: always
    command: --admin-password='$$2y$$12$$G0u7sVYXDoCWYfBaPqwFOu00X.uHOXhGTF.mcySC2M1pxyWcXUOHe'
    networks:
      - servicos
    ports:
      - "9011:9000"
    volumes:
      - "{{ dados_docker_dir_path }}/portainer/:/data"
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      com.centurylinklabs.watchtower.enable: false

  {{ apprise_container_name }}:
    image: "caronc/apprise:latest"
    container_name: "{{ apprise_container_name }}"
    restart: always
    networks:
      - servicos
    volumes:
      - "{{ dados_docker_dir_path }}/apprise/:/config"
    labels:
      com.centurylinklabs.watchtower.enable: false

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    networks:
      - servicos
    environment:
      REPO_USER: "{{ services_secrets.Others.Docker.AccessCredentials.Login }}"
      REPO_PASS: "{{ services_secrets.Others.Docker.AccessCredentials.Password }}"
      WATCHTOWER_NOTIFICATIONS_HOSTNAME: "{{ tenant_id }}"
      WATCHTOWER_NOTIFICATIONS_LEVEL: warn
      WATCHTOWER_NOTIFICATIONS: "msteams"
      WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL: "{{ services_secrets.Others.WatchTower.WebHooks.MsTeams }}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --include-stopped --revive-stopped --cleanup --schedule "$AUTO_UPDATE_CRON"

# o NGINX resolve o DNS logo ao subir, que estão indicados nos arquivos conf. esses dois serviços são utilizados para roteamento,
# por isso eles estão nesse compose
  korp-legacy-frontend-router:
    image: "{{ docker_account }}/korp.legacy.frontend-router:1.0.x{{ docker_image_suffix }}"
    container_name: "Korp.Legacy.Frontend-router"
    restart: always
    extra_hosts: *default-extra_hosts
    environment:
      - VERBOSE=false
      - OVERRIDE_PROXY_SCHEME=http
    networks:
      servicos:  
        ipv4_address: "{{ docker_servicos_network_ip_address_start | default ('172.18') }}.128.1"

  viasoft-loader:
    image: "{{ docker_account }}/viasoft.loader:2.1.x{{ docker_image_suffix }}"
    container_name: "Viasoft.Loader"
    restart: always
    extra_hosts: *default-extra_hosts
    environment:
      - backendUrl={{ frontend.endpoints.gateway_url }}
    networks:
      servicos:  
        ipv4_address: "{{ docker_servicos_network_ip_address_start | default ('172.18') }}.128.2"
