- name: Instalação de dependências padrões
  ansible.builtin.pip:
    name: "{{ item }}"
  loop:
    # Bibliotecas usadas pelo Ansible para usar o Consul
    - python-consul
    - requests
    # Bibliotecas usadas pelo Ansible para rodar querys no SQL Server
    - pymssql

- name: Configuração de certificado padrão
  block:
  - name: Provisão da CA para geração do certificado
    ansible.builtin.import_tasks: ca_certificate.yml

  - name: Provisão do certificado assinado pela CA
    ansible.builtin.import_tasks: self_signed_certificate.yml

  when: certs.self_signed.certificate

- name: Configuração de certificado customizado
  ansible.builtin.import_tasks: custom_cert.yml
  when: certs.custom.certificate

- name: Configuração de arquivos e pastas
  ansible.builtin.import_tasks: files_and_folders_setup.yml

- name: Garantia de atualização do RabbitMQ
  block:
  - name: "Leitura de 'infrastructure-compose.yml'"
    ansible.builtin.stat:
      path: "{{ compose_dir_path }}/infrastructure-compose.yml"
    register: infrastructure_compose_file
  
  - name: "Definição de 'infrastructure_compose_content'"
    ansible.builtin.set_fact:
      infrastructure_compose_content: "{{ lookup('file', '{{ compose_dir_path }}/infrastructure-compose.yml') | from_yaml }}"
    when: infrastructure_compose_file.stat.exists

  - name: Validação de nome da imagem
    ansible.builtin.set_fact:
      is_rabbitmq_out_of_date: true
    when: infrastructure_compose_content.services[ rabbitmq_container_name ].image | default(None) == 'korp/rabbitmq:1.1.0' 

  - name: Obtenção de permissão para atualização
    block:
      - name: Requerimento de flag para atualização
        block:
        - name: Permissão para atualização do RabbitMQ
          ansible.builtin.debug: 
            msg: "ATENÇÃO: A versão do atual do RabbitMQ ({{ infrastructure_compose_content.services[ rabbitmq_container_name ].image }}) está desatualizada.\n
              Para realizar a atualização, o setup precisará parar todos os serviços até que a atualização seja concluída;\n
              Inicie o setup novamente passando a flag 'should_update_rabbitmq=true'"

        - name: Saída do setup
          ansible.builtin.meta: end_play
        when: not should_update_rabbitmq | bool | default(false)

      - name: Início de atualização do RabbitMQ
        ansible.builtin.include_tasks: rabbitmq_update.yml
        when: should_update_rabbitmq | bool | default(false)     
    when: is_rabbitmq_out_of_date | default(false)

- name: Configuração e transferência de arquivos de compose
  ansible.builtin.template:
    dest: "{{ compose_dir_path }}/{{ item[:-3] | basename }}"
    src: "composes/{{ item | basename }}"
    owner: "{{ linux_korp.user }}"
    group: root
    mode: '0644'
  loop:
    "{{ lookup('fileglob', 'templates/composes/*', wantlist=True) | select('search', '.yml.j2') }}"

- name: Criação e inicialização de infrastructure-compose
  community.docker.docker_compose_v2:
    project_src: "{{ compose_dir_path }}/"
    env_files: ["{{ docker_env_file_path }}"]
    files:
      - infrastructure-compose.yml

# Configuração de certificado vem depois de configuração do compose pois é necessário nginx para configurá-lo
- name: Configuração de certificado automatizado
  ansible.builtin.import_tasks: certbot.yml
  when: certs.certbot_automated.certificate

# TODO - Cronjob deve ter horário customizável

# cronjob é criado em '/var/spool/cron/crontabs/korp'
- name: Criação de cronjob para renovação de certificados
  ansible.builtin.cron:
    name: "korp cert renew"
    hour: "1"
    minute: "0"
    user: "{{ linux_korp.user }}"
    job: "{{ korp_dir_path }}/scripts/cert_renew.sh"

- name: Adição de rotação de logs para renovação de certificados
  ansible.builtin.template:
    dest: "{{ korp_dir_path }}/logrotate.d/korp_cert_renew"
    src: "logrotate/korp_cert_renew.j2"
    owner: root
    group: root
    # Arquivo não pode ser escrito pelo grupo ou por outros por causa das politicas de 'logrotate'
    mode: '0644'
  become: true
  become_user: root

- name: Criação de usuário de uso da korp no SQL Server - Produção
  community.general.mssql_script:
    login_user: "{{ mssql.default_user }}"
    login_password: "{{ mssql.default_password }}"
    login_host: "{{ mssql.address }}"
    name: master
    script: "{{ lookup('template', 'sql/create_user.j2') | string }}"
  vars:
    mssql_user: "{{ mssql.korp_user }}"
    mssql_pass: "{{ mssql.korp_password }}"

- name: Criação de usuário de uso da korp no SQL Server - Testing
  community.general.mssql_script:
    login_user: "{{ testing_mssql.default_user }}"
    login_password: "{{ testing_mssql.default_password }}"
    login_host: "{{ testing_mssql.address }}"
    name: master
    script: "{{ lookup('template', 'sql/create_user.j2') | string }}"
  vars:
    mssql_user: "{{ testing_mssql.korp_user }}"
    mssql_pass: "{{ testing_mssql.korp_password }}"

- name: Criação e configuração de usuário no rabbitmq
  ansible.builtin.import_tasks: rabbitmq_user.yml

- name: Criação de usuário de uso da korp no Postgres
  ansible.builtin.shell: |
    docker exec -i "{{ postgres_container_name }}" psql -U postgres -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '{{ postgres.korp_user }}') THEN EXECUTE 'CREATE USER \"{{ postgres.korp_user }}\" WITH PASSWORD ''{{ postgres.korp_password }}'' LOGIN SUPERUSER CREATEDB CREATEROLE INHERIT REPLICATION;'; END IF; END \$\$;"

- name: Leitura de configuração de minio da nuvem
  ansible.builtin.uri:
    url: "{{ gateway_url }}/vault/manager/server-deploy/minio-gateway-config/{{ token }}"
    return_content: true
  register: response

- name: Definição de minio_gateway_config
  ansible.builtin.set_fact:
    minio_gateway_config: "{{ response.json | default('') }}"

- name: "Garantia de kv no consul para Global"
  ansible.builtin.include_role:
    name: utils
    tasks_from: 'consul_kv/ensure_kv'
  vars:
    service_name: Global
    keys_to_overwrite: ["RuntimeEnvironment"]

- name: Configuração de fabio pelo consul
  ansible.builtin.import_tasks: fabio_config.yml
