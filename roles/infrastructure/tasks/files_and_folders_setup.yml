- name: Transferência de arquivos de configuração em files
  ansible.builtin.copy:
    dest: "{{ config_dir_path }}/"
    src: configs/
    group: root
    mode: '0644'

- name: Criação de diretórios
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ linux_korp.user }}"
    group: root
  loop:
    - "{{ certs_directory }}/logs"
    - "{{ korp_dir_path }}/logrotate.d/"
    - "{{ korp_dir_path }}/scripts/"

- name: Transferência de scripts de template
  ansible.builtin.template:
    dest: "{{ korp_dir_path }}/scripts/{{ item[:-3] | basename }}"
    src: "scripts/{{ item | basename }}"
    owner: "{{ linux_korp.user }}"
    group: root
    mode: '0755'
  loop: "{{ lookup('fileglob', 'templates/scripts/*', wantlist=True) }}"

- name: Transferência de scripts de files
  ansible.builtin.copy:
    dest: "{{ korp_dir_path }}/scripts/{{ item | basename }}"
    src: "scripts/{{ item | basename }}"
    owner: "{{ linux_korp.user }}"
    group: root
    mode: '0755'
  loop: "{{ lookup('fileglob', 'files/scripts/*', wantlist=True) }}"

# itera sobre os aquivos "*.yml.j2" presentes em 'templates/configs', substituindo as variáveis presentes.
# o diretório de transferência deve existir, por isso as duas tasks a cima são necessárias.
- name: Configuração e transferência de arquivos de configuração em templates
  ansible.builtin.template:
    dest: "{{ config_dir_path }}/{{ item[:-3] | basename }}"
    src: "configs/{{ item | basename }}"
    owner: "{{ linux_korp.user }}"
    group: root
    mode: '0644'
  loop:
    "{{ lookup('fileglob', 'templates/configs/*', wantlist=True) | select('search', '.j2') }}"

- name: Setup de configuração de nginx
  block:
    - name: Criação de diretório de configuração de nginx
      ansible.builtin.file:
        path: "{{ config_dir_path }}/nginx/conf.d"
        state: directory
        mode: '0755'
        owner: "{{ linux_korp.user }}"
        group: root

    - name: Configuração e transferência de arquivos de configuração de nginx
      ansible.builtin.template:
        dest: "{{ config_dir_path }}/nginx/{{ item }}"
        src: "configs/nginx/{{ item }}.j2"
        owner: "{{ linux_korp.user }}"
        group: root
        mode: '0644'
      loop:
        - "ssl_conf"
        - "default_conf"

    - name: Configuração e transferência de arquivos de nginx
      ansible.builtin.template:
        dest: "{{ config_dir_path }}/nginx/conf.d/{{ item }}"
        src: "configs/nginx/conf.d/{{ item }}.j2"
        owner: "{{ linux_korp.user }}"
        group: root
        mode: '0644'
      loop:
        - "korp.conf"
        - "korp-api.conf"
        - "korp-cdn.conf"
        - "korp.locations"
        - "korp-api.locations"
        - "korp-cdn.locations"
        - "korp.ssl-locations"
        - "korp-api.ssl-locations"
        - "korp-cdn.ssl-locations"
      # arquivos devem ser copiados posteriormente caso o certificado seja provisionado pelo certbot
      when: not certs.certbot_automated.certificate

    - name: Configuração para certbot
      block:
        - name: Configuração e transferência de arquivo 'acme-challenge'
          ansible.builtin.template:
            dest: "{{ config_dir_path }}/nginx/conf.d/{{ item }}"
            src: "configs/nginx/conf.d/{{ item }}.j2"
            owner: "{{ linux_korp.user }}"
            group: root
            mode: '0644'
          loop:
            - "acme-challenge.conf"

      when: certs.certbot_automated.certificate

# como estamos usando 'template' para configurar os arquivos de compose, o diretório "{{ korp_dir_path }}/composes/"" deve existir.
# essas duas tasks asseguram que o diretório será criado se necessário.
- name: Verificação de diretório de composes
  ansible.builtin.stat:
    path: "{{ compose_dir_path }}/"
  register: korp_compose_folder

- name: Criação de diretório de composes
  ansible.builtin.file:
    path: "{{ compose_dir_path }}/"
    state: directory
    mode: '0755'
    owner: "{{ linux_korp.user }}"
    group: root
  when: not korp_compose_folder.stat.exists

- name: Verificação de diretório de composes versionados
  ansible.builtin.stat:
    path: "{{ versioned_compose_dir_path }}/"
  register: korp_compose_folder

- name: Criação de diretório de composes versionados
  ansible.builtin.file:
    path: "{{ versioned_compose_dir_path }}/"
    state: directory
    mode: '0755'
    owner: "{{ linux_korp.user }}"
    group: root
  when: not korp_compose_folder.stat.exists

- name: Criação de arquivo de variáveis de ambiente para docker
  ansible.builtin.copy:
    dest: "{{ docker_env_file_path }}"
    mode: '0644'
    content: |
      TESTING_DB_MSSQL={{ testing_mssql.address }}
      DB_MSSQL={{ mssql.address }}
      APP_SERVER={{ app_server.address }}
      AUTO_UPDATE_CRON=0 0 3 * * *
      API_GATEWAY={{ docker_servicos_network_ip_address_start | default ('172.18') }}.0.1
      PORTAL_GATEWAY={{ docker_servicos_network_ip_address_start | default ('172.18') }}.0.1
      CDN_GATEWAY={{ docker_servicos_network_ip_address_start | default ('172.18') }}.0.1
      USE_SERVERGC={{ use_servergc }}

# itera sobre os aquivos "*.yml.j2" presentes em 'templates/composes', substituindo as variáveis presentes.
# o diretório de transferência deve existir, por isso as duas tasks a cima são necessárias.
- name: Configuração e transferência de arquivos de compose
  ansible.builtin.template:
    dest: "{{ compose_dir_path }}/{{ item[:-3] | basename }}"
    src: "composes/{{ item | basename }}"
    owner: "{{ linux_korp.user }}"
    group: root
    mode: '0644'
  loop:
    "{{ lookup('fileglob', 'templates/composes/*', wantlist=True) | select('search', '.yml.j2') }}"

- name: Garantia da existência dos diretórios de volume infrastructure
  ansible.builtin.include_role:
    name: utils
    tasks_from: services/ensure_volume_folder
  vars:
    volume_path: "{{ item }}"
  loop:
    - "{{ dados_docker_dir_path }}/consul-server"
    - "{{ dados_docker_dir_path }}/{{ postgres_container_name }}"
    - "{{ dados_docker_dir_path }}/{{ rabbitmq_container_name }}"
    - "{{ dados_docker_dir_path }}/portainer"


- name: "Verificação de existência de {{ config_dir_path }}/installed_apps.yml"
  ansible.builtin.stat:
    path: "{{ config_dir_path }}/installed_apps.yml"
  register: installed_apps_file

- name: "Garantia de existência de {{ config_dir_path }}/installed_apps.yml"
  ansible.builtin.copy:
    dest: "{{ config_dir_path }}/installed_apps.yml"
    owner: "{{ linux_korp.user }}"
    group: root
    mode: '0644'
    content: |
      unversioned:
      versioned:
  when: not installed_apps_file.stat.exists
