- name: Definição de variáveis
  ansible.builtin.set_fact:
    services: "{{ (lookup('ansible.builtin.template', 'vars/main.yml') | from_yaml)['services'] }}"

- name: Adição de serviços de ERP_ACL
  ansible.builtin.include_role:
    name: utils
    tasks_from: services/add_service
  vars:
    service_name: "{{ item.key }}"
    id: ERP_ACL
  with_dict: "{{ services }}"
  loop_control:
    extended: true

- name: Obtenção de 'organization_environments'
  ansible.builtin.include_role:
    name: utils
    tasks_from: local_requests/tenant_management/main.yaml

- name: Execução de update em 'IntegrarEventosSistema' - Produção
  community.general.mssql_script:
    login_user: "{{ mssql.default_user }}"
    login_password: "{{ mssql.default_password }}"
    login_host: "{{ mssql.address }}"
    name: "{{ item.databaseName }}"
    script: "{{ lookup('template', 'sql/update_IntegrarEventosSistema.sql.j2') | string }}"
  vars:
    db_name: "{{ item.databaseName }}"
  when: item.isProduction and item.name != "Ansible-Dev-1" # todo
  loop: "{{ organization_environments }}"

- name: Execução de update em 'IntegrarEventosSistema' - Testing
  community.general.mssql_script:
    login_user: "{{ testing_mssql.default_user }}"
    login_password: "{{ testing_mssql.default_password }}"
    login_host: "{{ testing_mssql.address }}"
    name: "{{ item.databaseName }}"
    script: "{{ lookup('template', 'sql/update_IntegrarEventosSistema.sql.j2') | string }}"
  vars:
    db_name: "{{ item.databaseName }}"
  when: not item.isProduction
  loop: "{{ organization_environments }}"